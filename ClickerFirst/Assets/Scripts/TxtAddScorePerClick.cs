using System.Collections;
using DG.Tweening;
using UnityEngine;
using UnityEngine.UI;

public class TxtAddScorePerClick : MonoBehaviour
{
    private Text txtAddScore;
    private Graphic objectRenderer;
    private float animDuration = 0.5f;

    [SerializeField] private float spawnOffset = 50f; // –†–∞–∑–±—Ä–æ—Å —Å–ø–∞–≤–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    [SerializeField] private float minRotation = -15f; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
    [SerializeField] private float maxRotation = 15f;  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞

    private static Transform scaleTargetGlobal; // üü¢ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–∫–µ–π–ª–∞ (SausagoidsNumber)

    void Start()
    {
        txtAddScore = gameObject.GetComponent<Text>();
        int currScoreToAdd = Config.GetScorePerClick() * Config.GetDoublePointsRewValue();

        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ–≥–æ —á–∏—Å–ª–∞
        string randomColor = GetRandomColor();
        txtAddScore.text = $"<color={randomColor}>+{currScoreToAdd}</color>"; // –ö—Ä–∞—Å–∏–º –≤—Å—ë —á–∏—Å–ª–æ

        objectRenderer = gameObject.GetComponent<Graphic>();

        FindScaleTarget(); // üü¢ –ò—â–µ–º –æ–±—ä–µ–∫—Ç "SausagoidsNumber"
        AnimateMoveUpDisappear();
        ScaleObject(); // üü¢ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "SausagoidsNumber"
    }

    /// üîπ **–ú–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ "SausagoidsNumber"**
    private void FindScaleTarget()
    {
        if (scaleTargetGlobal == null)
        {
            Transform canvas = GameObject.Find("Canvas_UI")?.transform;
            if (canvas != null)
            {
                Transform scoreZone = canvas.Find("ScoreZone");
                if (scoreZone != null)
                {
                    scaleTargetGlobal = scoreZone.Find("SausagoidsNumber");
                    if (scaleTargetGlobal != null)
                        Debug.Log($"‚úÖ –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç SausagoidsNumber: {scaleTargetGlobal.name}");
                    else
                        Debug.LogWarning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç 'SausagoidsNumber' –≤–Ω—É—Ç—Ä–∏ ScoreZone!");
                }
                else
                {
                    Debug.LogWarning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç 'ScoreZone' –≤–Ω—É—Ç—Ä–∏ Canvas_UI!");
                }
            }
            else
            {
                Debug.LogWarning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Canvas_UI!");
            }
        }
    }

    /// üîπ **–ú–µ—Ç–æ–¥ –∞–Ω–∏–º–∞—Ü–∏–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è "SausagoidsNumber"**
    private void ScaleObject()
    {
        if (scaleTargetGlobal != null)
        {
            scaleTargetGlobal.DOKill(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
            scaleTargetGlobal.localScale = Vector3.one; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π

            scaleTargetGlobal.DOScale(1.2f, 0.1f) // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 20%
                .SetEase(Ease.OutQuad)
                .OnComplete(() =>
                {
                    scaleTargetGlobal.DOScale(1f, 0.1f).SetEase(Ease.InQuad); // ‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ 1.0
                });
        }
    }

    private string GetRandomColor()
    {
        string[] colors = { "#F3AF5E", "#F38E77", "#F3EC98", "#91CDF3", "#9498F3", "#9CF399", "#F37ADE" };
        return colors[Random.Range(0, colors.Length)];
    }

    private void AnimateMoveUpDisappear()
    {
        RectTransform rectTransform = GetComponent<RectTransform>();

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
        Vector2 randomOffset = new Vector2(
            UnityEngine.Random.Range(-spawnOffset, spawnOffset),
            UnityEngine.Random.Range(-spawnOffset, spawnOffset)
        );
        rectTransform.anchoredPosition += randomOffset;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
        float randomRotation = UnityEngine.Random.Range(minRotation, maxRotation);
        transform.rotation = Quaternion.Euler(0, 0, randomRotation);

        // –î–µ–ª–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 0
        transform.localScale = Vector3.zero;

        // –ê–Ω–∏–º–∞—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è (0 -> 1), –∑–∞—Ç–µ–º —É–º–µ–Ω—å—à–µ–Ω–∏—è (1 -> 0)
        transform.DOScale(1, animDuration * 0.5f) // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ
            .OnComplete(() =>
                transform.DOScale(0, animDuration * 0.5f) // –£–º–µ–Ω—å—à–µ–Ω–∏–µ
                    .OnComplete(DestroyObject) // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            );

        // –î–≤–∏–≥–∞–µ–º —Ç–µ–∫—Å—Ç –≤–≤–µ—Ä—Ö
        Vector2 endValue = rectTransform.anchoredPosition;
        endValue.y += 500; // –í—ã—Å–æ—Ç–∞ –ø–æ–¥—ä—ë–º–∞
        rectTransform.DOAnchorPos(endValue, animDuration);

        // –ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        objectRenderer.DOFade(0, animDuration);
    }

    private void DestroyObject()
    {
        Destroy(gameObject);
    }
}
