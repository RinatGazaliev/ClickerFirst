using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI; // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å UI –∫–Ω–æ–ø–∫–∞–º–∏
using DG.Tweening;

public class CrystalCollection : MonoBehaviour
{
    private int multiplierKF = 5;
    [SerializeField] private Button triggerButton; // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    [SerializeField] private GameObject PileOfCrystalParent;
    [SerializeField] private ParticleSystem vfxEffect; // üéá –°—Å—ã–ª–∫–∞ –Ω–∞ VFX
    [SerializeField] private Transform targetObject; // üéØ –û–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è
    [SerializeField] private Text txtValueReward; // üî§ –¢–µ–∫—Å—Ç –Ω–∞–≥—Ä–∞–¥—ã
    [SerializeField] private Image targetImage;
    [SerializeField] private SpriteRenderer targetSprite;
    [SerializeField] private Vector3[] InitialPos1;
    [SerializeField] private Quaternion[] InitialRotation1;
    [SerializeField] private Vector3 FinalPositionVert;
    [SerializeField] private Vector3 FinalPositionHor;
    [SerializeField] private int CrystalNo;

    private int currRewValue;
    private Vector3 endWorldPos; // –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    public Ease moveEase;

    void Start()
    {
        currRewValue = Config.GetScorePerClick() * multiplierKF;
        txtValueReward.text = currRewValue.ToString();
        InitialPos1 = new Vector3[CrystalNo];
        InitialRotation1 = new Quaternion[CrystalNo];

        for (int i = 0; i < PileOfCrystalParent.transform.childCount; i++)
        {
            InitialPos1[i] = PileOfCrystalParent.transform.GetChild(i).localPosition;
            InitialRotation1[i] = PileOfCrystalParent.transform.GetChild(i).rotation;
        }

        SetStartPositionCryst();

        // ‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        if (triggerButton != null)
        {
            triggerButton.onClick.AddListener(() =>
            {
                triggerButton.interactable = false; // ‚ùå –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
                StartScalingEffect();
            });
        }
        else
        {
            Debug.LogWarning("–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
        }
    }

    /// üîπ 1. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –∑–∞—Ç–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
    private void StartScalingEffect()
    {
        if (targetObject != null)
        {
            targetObject.DOScale(targetObject.localScale * 2.0f, 0.35f)
                .SetEase(Ease.OutQuad)
                .OnComplete(() =>
                {
                    StartFadeEffect();
                });
        }
        else
        {
            Debug.LogWarning("Target Object –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
        }
    }

    /// üîπ 2. –ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –∑–∞—Ç–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –º–æ–Ω–µ—Ç
    private void StartFadeEffect()
    {
        if (targetImage != null)
        {
            targetImage.DOFade(0, 0.2f)
                .SetEase(Ease.InExpo)
                .OnComplete(() =>
                {
                    targetObject.gameObject.SetActive(false);
                    StartEffects();
                });
        }
        else if (targetSprite != null)
        {
            targetSprite.DOFade(0, 0.2f)
                .SetEase(Ease.InExpo)
                .OnComplete(() =>
                {
                    targetObject.gameObject.SetActive(false);
                    StartEffects();
                });
        }
        else
        {
            targetObject.gameObject.SetActive(false);
            StartEffects();
        }
    }

    /// üîπ 3. –ó–∞–ø—É—Å–∫ VFX, –∞–Ω–∏–º–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç –∏ —Ç–µ–∫—Å—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    private void StartEffects()
    {
        if (vfxEffect != null)
        {
            vfxEffect.Play();
        }
        else
        {
            Debug.LogWarning("VFX –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
        }

        RewardPileOfCrystal();
        StartTextAnimation();
    }

    /// üîπ 4. –ê–Ω–∏–º–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ + –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç + –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
    private void StartTextAnimation()
    {
        if (txtValueReward != null)
        {
            Vector3 startPos = txtValueReward.transform.position;
            Vector3 moveDirection = (endWorldPos - startPos).normalized * 100f; // –î–≤–∏–≥–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, —á—Ç–æ –∏ –º–æ–Ω–µ—Ç—ã

            // üü¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ + –¥–≤–∏–∂–µ–Ω–∏–µ
            txtValueReward.transform.DOScale(1.5f, 0.5f)
                .SetEase(Ease.OutElastic);

            txtValueReward.transform.DOMove(startPos + moveDirection, 0.5f, false)
                .SetEase(Ease.OutExpo);

            // üî• –ü–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
            txtValueReward.DOFade(0, 0.4f)
                .SetEase(Ease.InExpo)
                .OnComplete(() =>
                {
                    txtValueReward.gameObject.SetActive(false);
                });
        }
        else
        {
            Debug.LogWarning("Text Value Reward –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
        }
    }

    private void Reset1()
    {
        for (int i = 0; i < PileOfCrystalParent.transform.childCount; i++)
        {
            PileOfCrystalParent.transform.GetChild(i).localPosition = InitialPos1[i];
            PileOfCrystalParent.transform.GetChild(i).rotation = InitialRotation1[i];
        }
    }

    public void RewardPileOfCrystal()
    {
        Reset1();
        float delay = 0f;
        PileOfCrystalParent.SetActive(true);

        for (int i = 0; i < PileOfCrystalParent.transform.childCount; i++)
        {
            int index = i;
            Transform crystal = PileOfCrystalParent.transform.GetChild(index);

            crystal.DOScale(1f, 0.1f)
                .SetDelay(delay)
                .SetEase(Ease.OutBack);

            crystal.DORotate(Vector3.zero, 0.3f)
                .SetDelay(delay + 0.05f)
                .SetEase(Ease.Flash);

            crystal.DOMove(endWorldPos, 0.5f)
                .SetDelay(delay + 0.2f)
                .SetEase(moveEase)
                .OnComplete(() =>
                {
                    crystal.gameObject.SetActive(false);
                    Config.SetTotalScore(Config.GetTotalScore() + currRewValue);
                });

            delay += 0.1f;
        }
    }

    public void SetStartPositionCryst()
    {
        float aspect = (float)Screen.width / Screen.height;
        endWorldPos = (aspect < 1) ? FinalPositionVert : FinalPositionHor;
    }
}
