using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI; // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å UI –∫–Ω–æ–ø–∫–∞–º–∏
using DG.Tweening;

public class CrystalCollection : MonoBehaviour
{
    private int multiplierKF;
    [SerializeField] private Button triggerButton; // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    [SerializeField] private GameObject PileOfCrystalParent;
    [SerializeField] private ParticleSystem vfxEffect; // üéá –°—Å—ã–ª–∫–∞ –Ω–∞ VFX
    [SerializeField] private Transform targetObject; // üéØ –û–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è
    [SerializeField] private Image targetImage; // üé≠ UI-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è Fading (–µ—Å–ª–∏ —ç—Ç–æ UI)
    [SerializeField] private SpriteRenderer targetSprite; // üñº –°–ø—Ä–∞–π—Ç –¥–ª—è Fading (–µ—Å–ª–∏ —ç—Ç–æ 2D)
    [SerializeField] private Vector3[] InitialPos1;
    [SerializeField] private Quaternion[] InitialRotation1;
    [SerializeField] private Vector3 FinalPositionVert; // –¢–µ–ø–µ—Ä—å –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    [SerializeField] private Vector3 FinalPositionHor;  // –¢–µ–ø–µ—Ä—å –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    [SerializeField] private int CrystalNo;
    [SerializeField] private Text txtValueReward;
    private int currRewValue;

    private Vector3 endWorldPos; // –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    public Ease moveEase;

    void Start()
    {
        multiplierKF = Random.Range(1,5);
        currRewValue = Config.GetScorePerClick() * multiplierKF;
        txtValueReward.text = currRewValue.ToString();
        InitialPos1 = new Vector3[CrystalNo];
        InitialRotation1 = new Quaternion[CrystalNo];

        for (int i = 0; i < PileOfCrystalParent.transform.childCount; i++)
        {
            InitialPos1[i] = PileOfCrystalParent.transform.GetChild(i).localPosition;
            InitialRotation1[i] = PileOfCrystalParent.transform.GetChild(i).rotation;
        }

        SetStartPositionCryst(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

        // ‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –Ω–∞–∂–∞—Ç–∏–µ
        if (triggerButton != null)
        {
            triggerButton.onClick.AddListener(() => StartScalingEffect());
        }
        else
        {
            Debug.LogWarning("–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
        }
    }

    /// üîπ 1. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏ –µ–≥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
    private void StartScalingEffect()
    {
        if (targetObject != null)
        {
            targetObject.DOScale(targetObject.localScale * 2.0f, 0.35f) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤ 2 —Ä–∞–∑–∞ –∑–∞ 0.35 —Å–µ–∫
                .SetEase(Ease.OutQuad)
                .OnComplete(() =>
                {
                    // üî• –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                    StartFadeEffect();
                });
        }
        else
        {
            Debug.LogWarning("Target Object –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
        }
    }

    /// üîπ 2. –ü–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫ VFX –∏ –º–æ–Ω–µ—Ç
    private void StartFadeEffect()
    {
        if (targetImage != null) // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç - UI Image
        {
            targetImage.DOFade(0, 0.2f)
                .SetEase(Ease.InExpo)
                .OnComplete(() =>
                {
                    targetObject.gameObject.SetActive(false);
                    StartEffects(); // –ü–æ—Å–ª–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º VFX + –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
                });
        }
        else if (targetSprite != null) // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç - SpriteRenderer (2D)
        {
            targetSprite.DOFade(0, 0.2f)
                .SetEase(Ease.InExpo)
                .OnComplete(() =>
                {
                    targetObject.gameObject.SetActive(false);
                    StartEffects(); // –ü–æ—Å–ª–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º VFX + –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
                });
        }
        else
        {
            // –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            targetObject.gameObject.SetActive(false);
            StartEffects();
        }
    }

    /// üîπ 3. –ó–∞–ø—É—Å–∫ VFX –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç
    private void StartEffects()
    {
        // üéá –ó–∞–ø—É—Å–∫–∞–µ–º VFX (–µ—Å–ª–∏ –æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω)
        if (vfxEffect != null)
        {
            vfxEffect.Play();
        }
        else
        {
            Debug.LogWarning("VFX –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
        }

        // üíé –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
        RewardPileOfCrystal();
    }

    private void Reset1()
    {
        for (int i = 0; i < PileOfCrystalParent.transform.childCount; i++)
        {
            PileOfCrystalParent.transform.GetChild(i).localPosition = InitialPos1[i];
            PileOfCrystalParent.transform.GetChild(i).rotation = InitialRotation1[i];
        }
    }

    public void RewardPileOfCrystal()
    {
        Reset1();
        float delay = 0f;
        PileOfCrystalParent.SetActive(true);

        for (int i = 0; i < PileOfCrystalParent.transform.childCount; i++)
        {
            int index = i; // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
            Transform crystal = PileOfCrystalParent.transform.GetChild(index);

            // –ê–Ω–∏–º–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞—á–∞–ª–æ)
            crystal.DOScale(1f, 0.1f)
                .SetDelay(delay)
                .SetEase(Ease.OutBack);

            // –í—Ä–∞—â–µ–Ω–∏–µ
            crystal.DORotate(Vector3.zero, 0.3f)
                .SetDelay(delay + 0.05f)
                .SetEase(Ease.Flash);

            // üü¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            crystal.DOMove(endWorldPos, 0.5f)
                .SetDelay(delay + 0.2f)
                .SetEase(moveEase)
                .OnComplete(() =>
                {
                    crystal.gameObject.SetActive(false);
                    
                });

            delay += 0.1f;
        }
        Config.SetTotalScore(Config.GetTotalScore()+currRewValue);
    }

    public void SetStartPositionCryst()
    {
        float aspect = (float)Screen.width / Screen.height;
        endWorldPos = (aspect < 1) ? FinalPositionVert : FinalPositionHor;
    }
}
